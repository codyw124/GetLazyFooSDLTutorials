
The only multithreading we've done had the main thread and a second thread each do their own thing. In most cases two threads will have to share data and with semaphores you can prevent two threads from accidentally accessing the same piece of data at once.
Here is our worker thread function. We will spawn two threads that will each execute their copy of this code.
The object gDataLock is our semaphore which will lock our gData buffer. A single integer is not much of a data buffer to protect, but since there are going to be two threads that aregoing to be reading and writing to it we need to make sure it is only being accessed by one thread at a time.
To create a semaphore we call SDL_CreateSemaphore with an initial value for the semaphore. The initial valuecontrols how many times code can pass through a semaphore before it locks.

For example, say you only want 4 threads to run at a time because you're on hardware with 4 cores. You'd give the semaphore a value of 4 to start with to make sure no more than 4threads run at the same time. In this demo we only want 1 thread accessing the data buffer at once so the mutex starts with a value of one.
When we're done with a semaphore we call SDL_DestroySemaphore.
Here we are starting our worker thread. An important thing to know is that seeding your random value is done per thread, so make sure you seed your random values for each threadyou run.
What each worker thread does is delay for a semi random amount, print the data that is there when it started working, assign a random number to it, print the number assigned tothe data buffer, and delay for a bit more before working again. The reason we need to lock data is because we do not want two threads reading or writing our shared data at the sametime.

Notice the calls to SDL_SemWait and SDL_SemPost.What's in between them is the critical section or the code we only want one thread to access at once. SDL_SemWait decrements the semaphore count and since the initial value is one,it will lock. After the critical section executes, we call SDL_SemPost to increment the semaphore and unlock it.

If we have a situation where thread A locks and then thread B tries to lock, thread B will wait until thread A finishes the critical section and unlocks the semaphore. With thecritical section protected by a semaphore lock/unlock pair, only one thread can execute the critical section at once.
In the main function before we enter the main loop we launch two worker threads with a bit of random delay in between them. There no guarantee thread A or B will work first butsince the data they share is protected, we know they won't try to execute the same piece of code at once.
Here the main thread runs while the threads to their work. If the main loop end before the threads finish working, we wait on them to finish with SDL_WaitThread.
