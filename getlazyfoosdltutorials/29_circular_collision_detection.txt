
Along with collision boxes, circles are the most common form of collider. Here we'll be checking collision between two circles and a circle and a box.
Checking collision between two circles is easy. All you have to do is check whether the distance between the center of each circle is less than the sum of their radii (radii is theplural for radius).

For box/circle collision, you have to find the point on the collision box that is closest to the center of the circle. If that point is less than the radius of the circle, there isa collision.
SDL has a built in rectangle structure, but we have to make our own circle structure with a position and radius.
Here is the dot class from previous collision detection tutorials with some more additons. The move function takesin a circle and a rectangle to check collision against when moving. We also now have a circle collider instead of a rectangle collider.
For this tutorial we have our collision detection functions for circle/circle and circle/rectangle collisions. We also have a function that calculates the distance between two pointssquared.

Using the distance squared instead of the distance is an optimization we'll go into more detail later.
The constructor takes in a position and initializes the colliders and velocity.
Like in previous collision detection tutorials, we move along the x axis, check collision against theedges of the screen, and check against the other scene objects. If the dot hit something we move back. As always, whenever the dot moves its colliders move with it.

Then we do this again for the y axis.
The rendering code is a little different. SDL_Rects have their position at the top left where our circle structure has the position at the center. This means we need to offset therender position to the top left of the circle by subtracting the radius from the x and y position.
Here is our circle to circle collision detector. It simply checks if the distance squared between the centers is less than the sum of the radii squared. If it is, there is acollison.

Why are we using the distance squared as opposed to the plain distance? Because to calculate the distance involves a square root and calculating a square root is a relativelyexpensive operation. Fortunately if x > y then x^2 > y^2, so we can save a square root operation by just comparing the distance squared.
To check if a box and circle collided we need to find the closest point on the box.

If the circle's center is to the left of the box, the x position of the closest point is on the left side of the box.
If the circle's center is to the right of the box, the x position of the closest point is on the right side of the box.
If the circle's center is inside of the box, the x position of the closest point is the same as the x position of the circle.
Here we find the closest y position much like we did the x position. If the distance squared between the closest point on the box and the center of the circle is less than thecircle's radius squared, then there is a collision.
Here is the distance squared function. It's just a distance calculation ( squareRoot( x^2 + y^2 ) ) without the square root.
Before we enter the main loop we define the scene objects.
Finally in our main loop we handle input, move the dot with collision check and render the scene objects to the screen.
