
A major new addition to SDL 2 is the texture rendering API. This gives you fast, flexible hardware based rendering. In this tutorial we'll be using this new rendering technique.
Textures in SDL have their own data type intuitively called a SDL_Texture. When we deal with SDL textures you needan SDL_Renderer to render it to the screen which is why we declare a global renderer named "gRenderer".

As you can also see we have a new image loading routine with loadTexture and a globally declared texture we're going to load.
After we create our window, we have to create a renderer for our window so we can render textures on it. Fortunately this is easily done with a call toSDL_CreateRenderer.

After creating the renderer, we want to initialize the rendering color usingSDL_SetRenderDrawColor. This controls what color is used for various rendering operations.
Our texture loading function looks largely the same as before only now instead of converting the loaded surface to the display format, we create a texture from the loaded surfaceusing SDL_CreateTextureFromSurface. Like before, this function creates a new texture from anexisting surface which means like before we have to free the loaded surface and then return the loaded texture.
Since texture loading is abstracted with our image loading function, the loadMedia() function works pretty much the same as before.

In our clean up function, we have to remember to deallocate our textures using SDL_DestroyTexture.
In the main loop after the event loop, we callSDL_RenderClear. This function fills the screen with the color that was last set with SDL_SetRenderDrawColor.

With the screen cleared, we render the texture with SDL_RenderCopy. With the texture rendered, we still have toupdate the screen, but since we're not using SDL_Surfaces to render we can't use SDL_UpdateWindowSurface. Instead we have to useSDL_RenderPresent.
