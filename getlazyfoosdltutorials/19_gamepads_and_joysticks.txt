
Just like with mouse input and keyboard input, SDL has the ability to read input from a joystick/gamepad/game controller. In this tutorial we'll be making an arrow rotate based on the input of a joystick.
The way SDL handles analog sticks on a game controller is that it converts its position into a number between -32768 to 32767. This mean a light tap could report a position of1000+. We want to ignore light taps, so we want to create a dead zone where input from the joystick is ignored. This is why we define this constant and we'll see how it works later.
The data type for a game controller is SDL_Joystick. Here we declare the global joystick handle we'll use tointeract with the joystick.
This is important.

Up until now, we've been only initializing video so we can render to the screen. Now we need to initialize the joystick subsystem or reading from joystick won't work.
After initializing the joystick subsystem, we want to open our joystick. First we call SDL_NumJoysticks tocheck if there is at least one joystick connected. If there is, we call SDL_JoystickOpen to open the joystickat index 0. After the joystick is open, it will now report events to the SDL event queue.
After we're done with the joystick, we close it with SDL_JoystickClose.
For this demo, we want to keep track of the x and y direction. If the x equals -1, the joystick's x position is pointing left. If it is +1, the x position is pointing right.The y position for joysticks has positive being up and negative being down, so y = +1 is up and y = -1 is down. If x or y is 0, that means it's in the dead zone and is in the center.
In our event loop, we check if the joystick has moved by checking for a SDL_JoyAxisEvent. The "which"variable says which controller the axis motion came from, and here we check that the event came from joystick 0.

Next we want to check whether it was a motion in the x direction or y direction, which the "axis" variable indicates. Typically, axis 0 is the x axis.

The "value" variable says what position the analog stick has on the axis. If the x position is less than the dead zone, the direction is set to negative. If the position is greaterthan the dead zone, the direction is set to positive. If it's in the dead zone, the direction is set to 0.
Here we do the same thing again with the y axis, which is identified with the axis ID 1.
Before we render the arrow which will point in the direction the the analog stick is pushed, we need to calculate the angle. We do this using the cmath function atan2, which standsfor arc tangent 2, AKA inverse tangent 2.

For those of you familiar with trigonometry, this is basically the inverse tangent function with some additional code inside that takes into account the which quadrant the valuesare coming from.

For those of you only familiar with geometry, just know you give it the y position and x position and it will give you the angle in radians. SDL wants rotation angles in degrees, sowe have to convert the radians to degrees by multiplying it by 180 over Pi.

When both the x and y position are 0, we could get a garbage angle, so we correct the value to equal 0.
Finally we render the arrow rotated on the screen.

There are other joystick events like button presses,pov hats, andpluggin in or removing a controller. They are fairly simple and you should be able to pick them up with somelook at the documentation and experimentation.
