
Another important part of any sort of gaming API is the ability to handle time. In this tutorial we'll make a timer we can restart.
For this tutorial we'll be using string streams and have to include the sstream header which should come standard with your C++ compiler.
As mentioned in the font rendering tutorial, you want to minimize the amount of times you render text. We'll have atexture to prompt input and a texture to display the current time in milliseconds. The time texture changes every frame so we have to render that every frame, but the prompt texturedoesn't change so we can render it once in the file loading function.
Before we enter the main loop we want to declare some variables. The two we want to pay attention to is the startTime variable (which is an Unsigned integer that's32bits) and the timeText variable which is a string stream.

For those of you who have never used string streams, just know that they function like iostreams only instead of reading or writing to the console, they allow you to read and writeto a string in memory. It'll be easier to see when we see them used further on in the program.
There's a function called SDL_GetTicks which returns the time since the program started in milliseconds. For this demo, we'll be having a timer that restarts every time we press the return key.

Remember how we initialized the start time to 0 at the start of the program? This means the timer's time is just the current time since the program started returned by SDL_GetTicks.If we were to restart the timer when SDL_GetTicks was at 5000 milliseconds (5 seconds), then at 10,000 milliseconds the current time - the start time would be 10000 minus 5000 wouldbe 5000 milliseconds. So even though the timer contained by SDL_GetTicks hasn't restarted, we can have a timer keep track of a relative start time and reset its start time.
Here we're using our string stream. First we call str with an empty string to initialize it to be empty. Then we treat it like cout and print to it "Milliseconds since start time "and the current time minus the relative start time so it will print the time since we last started the timer.
Now that we have the time in a string stream, we can get a string from it and use it to render the current time to a texture.
Finally we render the prompt texture and the time texture to the screen.
