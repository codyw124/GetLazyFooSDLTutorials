
Multithreading can be used to make your program execute two things at once and take advantage of multithreaded architectures. Here we'll make a simple program that outputs to the console while the main thread runs.
There is a saying in computer science:
Premature optimization is the root of all evil
A major problem with newbie programmers is that they want to be like the professionals without paying their dues. They hear about a technology that the latest and greatest developersout there are using and they think if the use it too it will make them magically better.

One of these tools is multithreading. Since multicore processors launched at a consumer level in the early 00s, developers have been using this new tech to squeeze out as muchperformance as they can from their applications.

Here's the important part: a poorly made multithreaded program can perform worse than single thread program. Much worse. The fact is that multithreading inherently adds moreoverhead because threads then have to be managed. If you do not know the costs of using different multithreading tools, you can end up with code that is much slower than its singlethreaded equivalent.

The general rule is if you don't know:

    What cache coherency is.
    What cache alignment is.
    How operating systems handle threads and processes.
    How to use a profiler.

You should not be trying to use multithreaded optimization. Play with fire and you will get burned. However doing something not for the sake of performance like asynchronous fileloading isn't a bad idea for intermediate game developers.
When we want to use threads we need to make sure to include the SDL threads header.
Just like with callback functions, thread functions need to declared a certain way. They need to take in a void pointer as an argument and return an integer.
Our thread function is fairly simple. All it does is take in the data as an integer and uses it to print a message to the console.
Before we enter the main loop we run the thread function using SDL_CreateThread. This call will run thefunction in first argument, give it the name in the second argument (names are used to identify it for debugging purposes), and passes in the data from the third argument.

The thread will then execute while the main thread is still going. In case the main loop ends before the thread finishes, we make a call toSDL_WaitThread to make sure the thread finishes before the application closes.
